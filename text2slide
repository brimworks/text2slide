#!/usr/bin/env lua

local _0 = string.sub(debug.getinfo(1,'S').source, 2)

local dump    = require 'pl.pretty'.write
local zip     = require 'brimworks.zip'
local lom     = require 'lxp.lom'

-- Return a string representing the usage statement.
function usage(msg)
    if ( msg ) then
        msg = msg .. "\n\n"
    else
        msg = ""
    end
    return msg .. _0 ..
        [[: Create a new slide deck from a *.thmx file and plain text.

 -o,--output (file)          Location of *.pptx file to generate.
 -t,--theme  (file)          Location of *.thmx theme file to use.
 -l,--layout (name)          Select the layout from the theme.
 -i,--input  (default stdin) Location of input plain text.
]]
end

-- Parse the CLI options.  I tried usin lapp, but it just isn't
-- generic enough.
function parse_args(args)
    local function parse(i, args, result, key, match)
        if ( not match ) then
            return nil
        end
        if ( '' == match ) then
            result[key] = args[i+1]
            return 2
        end
        return 1, arg:sub(1)
    end

    local function match(str, ...)
        local patterns = {...}
        for i=1,#patterns do
            local result = str:match("^" .. patterns[i] .. "$")
            if ( result ) then
                if ( result == str ) then
                    return ''
                end
                return result
            end
        end
    end

    local result = {}
    local i=1

    while ( i < #args ) do
        local idx =
            parse(i, args, result,
                  "input",
                  match(args[i], "-i", "-i(=.*)",
                        "--input", "--input(=.*)")) or
            parse(i, args, result,
                  "output",
                  match(args[i], "-o", "-o(=.*)",
                        "--output", "--output(=.*)")) or
            parse(i, args, result,
                  "theme",
                  match(args[i], "-t", "-t(=.*)",
                        "--theme", "--theme(=.*)")) or
            parse(i, args, result,
                  "layout",
                  match(args[i], "-l", "-l(=.*)",
                        "--layout", "--layout(=.*)")) or
            nil

        if ( not idx ) then
            print(usage("Invalid argument: " .. args[i]))
            os.exit(1)
        end
        i = i + idx
    end
    if ( not result.output or not result.theme or not result.layout ) then
        print(usage("Missing required parameter --output and/or --theme and/or --layout"))
    end
    return result
end

-- Copy over relevant ports of theme file.
function copy_theme(theme, output, output_content_types)
    local content_type = get_content_types(theme)
    for i=1,#theme do
        local fname = theme:get_name(i)
        -- TODO: I should really be copying these based on content
        -- type, not based on path, I should also be "fixing up" any
        -- non-relative references.

        local match = fname:match("^theme/(slideLayouts/.*)") or
            fname:match("^theme/(slideMasters/.*)") or
            fname:match("^theme/(media/.*)") or
            fname:match("^theme/(theme/theme1\.xml)$")
        if ( match ) then
            local new_fname = "ppt/" .. match
            output:add(new_fname, "zip", theme, i)
            output_content_types[new_fname] = content_type(fname)
        end
    end
end

-- Generate a string representing the [Content_Type].xml file.
function make_content_types(ctypes)
    local result = {
        '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>',
        '<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">',
        '<Default Extension="xml"   ContentType="application/xml"/>',
        '<Default Extension="jpeg"  ContentType="image/jpeg"/>',
        '<Default Extension="rels"  ContentType="application/vnd.openxmlformats-package.relationships+xml"/>',
        '<Default Extension="jpg"   ContentType="image/jpeg"/>',
    }
    for k,v in pairs(ctypes) do
        k = k:gsub("^/*", "/")
        if ( not ( k:match("xml$")  and v == "application/xml" ) and
             not ( k:match("jpeg$") and v == "image/jpeg" ) and
             not ( k:match("rels$") and v == "application/vnd.openxmlformats-package.relationships+xml" ) and
             not ( k:match("jpg$")  and v == "image/jpeg" ) )
        then
            result[#result+1] = '<Override PartName="' .. k .. '" ContentType="' .. v .. '"/>'
        end
    end
    result[#result+1] = '</Types>'
    return table.concat(result, "\n")
end

function add_presentation(output, output_content_types, slide_count)
    -- TODO: Copy presentation.xml from the theme and simply add to
    -- the <p:sldIdLst>.
    output_content_types["ppt/presentation.xml"] = "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml"
    local xml = {
        '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>',
        '<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">',
        '<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/slideMaster" Target="slideMasters/slideMaster1.xml"/>',
        '<Relationship Id="rId2" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme" Target="theme/theme1.xml"/>',
    }
    for i=1,slide_count do
        xml[#xml+1] = '<Relationship Id="rId' .. (i+2) ..
            '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/slide" Target="slides/slide' ..
            i .. '.xml"/>'
    end
    xml[#xml+1] = '</Relationships>'

    output:add("ppt/_rels/presentation.xml.rels", "string", table.concat(xml, "\n"))

    xml = {
[[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<p:presentation xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:p="http://schemas.openxmlformats.org/presentationml/2006/main" saveSubsetFonts="1" autoCompressPictures="0">
  <p:sldMasterIdLst>
    <p:sldMasterId id="2147483648" r:id="rId1"/>
  </p:sldMasterIdLst>
  <p:sldIdLst>]],
    }

    for i=1,slide_count do
        xml[#xml+1] = '    <p:sldId id="' .. (i+257) .. '" r:id="rId' .. (i+2) .. '"/>'
    end
    xml[#xml+1] =
[[  </p:sldIdLst>
  <p:sldSz cx="9144000" cy="6858000" type="screen4x3"/>
  <p:notesSz cx="6858000" cy="9144000"/>
  <p:defaultTextStyle>
    <a:defPPr>
      <a:defRPr lang="en-US"/>
    </a:defPPr>
    <a:lvl1pPr marL="0" algn="l" defTabSz="457200" rtl="0" eaLnBrk="1" latinLnBrk="0" hangingPunct="1">
      <a:defRPr sz="1800" kern="1200">
        <a:solidFill>
          <a:schemeClr val="tx1"/>
        </a:solidFill>
        <a:latin typeface="+mn-lt"/>
        <a:ea typeface="+mn-ea"/>
        <a:cs typeface="+mn-cs"/>
      </a:defRPr>
    </a:lvl1pPr>
    <a:lvl2pPr marL="457200" algn="l" defTabSz="457200" rtl="0" eaLnBrk="1" latinLnBrk="0" hangingPunct="1">
      <a:defRPr sz="1800" kern="1200">
        <a:solidFill>
          <a:schemeClr val="tx1"/>
        </a:solidFill>
        <a:latin typeface="+mn-lt"/>
        <a:ea typeface="+mn-ea"/>
        <a:cs typeface="+mn-cs"/>
      </a:defRPr>
    </a:lvl2pPr>
    <a:lvl3pPr marL="914400" algn="l" defTabSz="457200" rtl="0" eaLnBrk="1" latinLnBrk="0" hangingPunct="1">
      <a:defRPr sz="1800" kern="1200">
        <a:solidFill>
          <a:schemeClr val="tx1"/>
        </a:solidFill>
        <a:latin typeface="+mn-lt"/>
        <a:ea typeface="+mn-ea"/>
        <a:cs typeface="+mn-cs"/>
      </a:defRPr>
    </a:lvl3pPr>
    <a:lvl4pPr marL="1371600" algn="l" defTabSz="457200" rtl="0" eaLnBrk="1" latinLnBrk="0" hangingPunct="1">
      <a:defRPr sz="1800" kern="1200">
        <a:solidFill>
          <a:schemeClr val="tx1"/>
        </a:solidFill>
        <a:latin typeface="+mn-lt"/>
        <a:ea typeface="+mn-ea"/>
        <a:cs typeface="+mn-cs"/>
      </a:defRPr>
    </a:lvl4pPr>
    <a:lvl5pPr marL="1828800" algn="l" defTabSz="457200" rtl="0" eaLnBrk="1" latinLnBrk="0" hangingPunct="1">
      <a:defRPr sz="1800" kern="1200">
        <a:solidFill>
          <a:schemeClr val="tx1"/>
        </a:solidFill>
        <a:latin typeface="+mn-lt"/>
        <a:ea typeface="+mn-ea"/>
        <a:cs typeface="+mn-cs"/>
      </a:defRPr>
    </a:lvl5pPr>
    <a:lvl6pPr marL="2286000" algn="l" defTabSz="457200" rtl="0" eaLnBrk="1" latinLnBrk="0" hangingPunct="1">
      <a:defRPr sz="1800" kern="1200">
        <a:solidFill>
          <a:schemeClr val="tx1"/>
        </a:solidFill>
        <a:latin typeface="+mn-lt"/>
        <a:ea typeface="+mn-ea"/>
        <a:cs typeface="+mn-cs"/>
      </a:defRPr>
    </a:lvl6pPr>
    <a:lvl7pPr marL="2743200" algn="l" defTabSz="457200" rtl="0" eaLnBrk="1" latinLnBrk="0" hangingPunct="1">
      <a:defRPr sz="1800" kern="1200">
        <a:solidFill>
          <a:schemeClr val="tx1"/>
        </a:solidFill>
        <a:latin typeface="+mn-lt"/>
        <a:ea typeface="+mn-ea"/>
        <a:cs typeface="+mn-cs"/>
      </a:defRPr>
    </a:lvl7pPr>
    <a:lvl8pPr marL="3200400" algn="l" defTabSz="457200" rtl="0" eaLnBrk="1" latinLnBrk="0" hangingPunct="1">
      <a:defRPr sz="1800" kern="1200">
        <a:solidFill>
          <a:schemeClr val="tx1"/>
        </a:solidFill>
        <a:latin typeface="+mn-lt"/>
        <a:ea typeface="+mn-ea"/>
        <a:cs typeface="+mn-cs"/>
      </a:defRPr>
    </a:lvl8pPr>
    <a:lvl9pPr marL="3657600" algn="l" defTabSz="457200" rtl="0" eaLnBrk="1" latinLnBrk="0" hangingPunct="1">
      <a:defRPr sz="1800" kern="1200">
        <a:solidFill>
          <a:schemeClr val="tx1"/>
        </a:solidFill>
        <a:latin typeface="+mn-lt"/>
        <a:ea typeface="+mn-ea"/>
        <a:cs typeface="+mn-cs"/>
      </a:defRPr>
    </a:lvl9pPr>
  </p:defaultTextStyle>
</p:presentation>]]

    output:add("ppt/presentation.xml", "string", table.concat(xml, "\n"))
end

function add_slide(output, output_content_types, slide_count, current_song_title, current_song_lyrics, layout)
    if not current_song_title then
        current_song_title=''
    end

    -- trim extra spaces.
    while ( #current_song_lyrics and '' == current_song_lyrics[#current_song_lyrics] ) do
        current_song_lyrics[#current_song_lyrics] = nil
    end

    slide_count = slide_count + 1

    -- TODO: Iterate over each layout and select the:
    --  <p:cSld name="2_Custom Layout">
    --  this is so we can give people the option to choose which layout to use.
    output_content_types["ppt/slides/slide" .. tostring(slide_count) .. ".xml"] = "application/vnd.openxmlformats-officedocument.presentationml.slide+xml"
    output:add("ppt/slides/_rels/slide" .. tostring(slide_count) .. ".xml.rels", "string", [[
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/slideLayout" Target="]] ..
               layout .. [["/></Relationships>]])
    local slide_body = [[
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<p:sld xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:p="http://schemas.openxmlformats.org/presentationml/2006/main">
  <p:cSld>
    <p:spTree>
      <p:nvGrpSpPr>
        <p:cNvPr id="1" name=""/>
        <p:cNvGrpSpPr/>
        <p:nvPr/>
      </p:nvGrpSpPr>
      <p:grpSpPr>
        <a:xfrm>
          <a:off x="0" y="0"/>
          <a:ext cx="0" cy="0"/>
          <a:chOff x="0" y="0"/>
          <a:chExt cx="0" cy="0"/>
        </a:xfrm>
      </p:grpSpPr>
      <p:sp>
        <p:nvSpPr>
          <p:cNvPr id="2" name="Content Placeholder 1"/>
          <p:cNvSpPr>
            <a:spLocks noGrp="1"/>
          </p:cNvSpPr>
          <p:nvPr>
            <p:ph sz="quarter" idx="10"/>
          </p:nvPr>
        </p:nvSpPr>
        <p:spPr/>
        <p:txBody>
          <a:bodyPr/>
          <a:lstStyle/>
          <a:p>
            <a:r>
              <a:rPr lang="en-US" dirty="0" smtClean="0"/>
              <a:t>]] .. table.concat(current_song_lyrics, "\r\n") .. [[</a:t>
            </a:r>
            <a:endParaRPr lang="en-US" dirty="0"/>
          </a:p>
        </p:txBody>
      </p:sp>
      <p:sp>
        <p:nvSpPr>
          <p:cNvPr id="3" name="Title 2"/>
          <p:cNvSpPr>
            <a:spLocks noGrp="1"/>
          </p:cNvSpPr>
          <p:nvPr>
            <p:ph type="title"/>
          </p:nvPr>
        </p:nvSpPr>
        <p:spPr/>
        <p:txBody>
          <a:bodyPr/>
          <a:lstStyle/>
          <a:p>
            <a:r>
              <a:rPr lang="en-US" dirty="0" smtClean="0"/>
              <a:t>]] .. current_song_title .. [[</a:t>
            </a:r>
            <a:endParaRPr lang="en-US" dirty="0"/>
          </a:p>
        </p:txBody>
      </p:sp>
    </p:spTree>
  </p:cSld>
</p:sld>
      ]]

    output:add("ppt/slides/slide" .. tostring(slide_count) .. ".xml", "string", slide_body)

    return slide_count
end

function trim(str)
    if ( nil == str ) then
        return nil
    end
    return str:gsub("^%s*(.-)%s*$", "%1")
end

function locate_layout(theme, layout_name)
    local ctype = get_content_types(theme)
    local layout_names = {}

    layout_name = layout_name:lower()

    for i=1,#theme do
        if ( ctype(theme:get_name(i)) ==
             "application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml" )
        then
            local xml = slurp(theme, i)
            local doc = lom.parse(xml)
            if ( doc[1].tag == "p:cSld" and
                 doc[1].attr.name )
            then
                if ( doc[1].attr.name:lower() == layout_name ) then
                    local name = theme:get_name(i)
                    name = name:gsub("^/*theme/", "/ppt/")
                    return name
                end
                layout_names[#layout_names+1] = doc[1].attr.name
            end
        end
    end
    error("Unknown layout name '" .. layout_name .. "', but found '" .. table.concat(layout_names, "' '") .. "'")
end

function main(args)
    local theme  = assert(zip.open(args.theme,  zip.CHECKCONS))
    local output = assert(zip.open(args.output, zip.OR(zip.EXCL, zip.CREATE)))
    local input  = io.stdin
    local output_content_types = {}

    if args.input then
        input = io.open(args.input, "r")
    end

    local layout = locate_layout(theme, args.layout)

    copy_theme(theme, output, output_content_types)

    output:add("_rels/.rels", "string", [[
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
  <Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="/ppt/presentation.xml"/>
</Relationships>
               ]])


    local slide_count = 0
    local current_song_title  = nil
    local current_song_lyrics = {}
    local dash_dash = 0
    while true do
        local line = trim(input:read())
        if ( nil == line ) then
            break
        elseif ( line:match("^%-%-") ) then
            dash_dash = 1
        elseif ( dash_dash == 1 and line:match("%w+") ) then
            dash_dash = 0
            if ( #current_song_lyrics > 0 ) then
                slide_count = add_slide(output, output_content_types, slide_count, current_song_title, current_song_lyrics, layout)
                current_song_lyrics = {}
            end
            current_song_title  = line
        elseif ( dash_dash > 1 and line:match("%w+") ) then
            dash_dash = 0
            if ( #current_song_lyrics > 0 ) then
                slide_count = add_slide(output, output_content_types, slide_count, current_song_title, current_song_lyrics, layout)
                current_song_title  = nil
            end
            current_song_lyrics = {line}
        elseif ( dash_dash > 0 ) then
            dash_dash = dash_dash + 1
        else
            current_song_lyrics[#current_song_lyrics+1] = line
        end
    end
    
    if ( #current_song_lyrics > 0 ) then
        slide_count = add_slide(output, output_content_types, slide_count, current_song_title, current_song_lyrics, layout)
    end

    add_presentation(output, output_content_types, slide_count)

    output:add("[Content_Types].xml", "string", make_content_types(output_content_types))

    output:close()
    theme:close()

    return 0
end

function get_content_types(ar)
    local xml = slurp(ar, "[Content_Types].xml")
    local doc = lom.parse(xml)

    local ext   = {}
    local files = {}
    for i=1,#doc do
        if ( "Default" == doc[i].tag ) then
            ext[doc[i].attr.Extension] =
                doc[i].attr.ContentType
        elseif ( "Override" == doc[i].tag ) then
            files[doc[i].attr.PartName] =
                doc[i].attr.ContentType
        end
    end

    return
    function(file)
        file = file:gsub("^/*", "/")
        if ( files[file] ) then
            return files[file]
        end
        return ext[string.gsub(file, ".*%.(.*)", "%1")]
    end
end

function slurp(ar, file_id)
    local buff = {}
    local file = ar:open(file_id)
    while true do
        local str = file:read(10)
        if #str == 0 then
            break
        end
        buff[#buff+1] = str
    end
    file:close()
    return table.concat(buff)
end

os.exit(main(parse_args(arg)))
